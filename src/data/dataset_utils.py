#!/usr/bin/env python3
"""
Dataset management utilities for creating YOLO dataset configuration files.
"""

import os
import yaml
from pathlib import Path


def create_dataset_yaml(output_dir: str):
    """Create dataset.yaml file for YOLO training."""
    dataset_config = {
        "path": str(Path(output_dir).absolute()),
        "train": "images/train",
        "val": "images/val",
        "test": "images/test",
        "names": {0: "poo"},  # Custom class for fine-tuning
    }

    yaml_path = os.path.join(output_dir, "dataset.yaml")
    with open(yaml_path, "w") as f:
        yaml.dump(dataset_config, f, default_flow_style=False)

    print(f"Created dataset.yaml at {yaml_path}")


def create_dataset_readme(
    output_dir: str,
    total_samples: int,
    train_count: int,
    val_count: int,
    test_count: int,
    min_segment_dist: int,
    min_cutout_dist: int,
    cutout_size: int,
    random_seed: int,
):
    """Create README.md for the processed dataset."""
    readme_content = f"""# Processed Dataset: boxed_640x640

This dataset contains 640x640 pixel cutouts derived from semantic mask data.

## Dataset Statistics
- **Total samples**: {total_samples}
- **Training samples**: {train_count}
- **Validation samples**: {val_count}
- **Test samples**: {test_count}

## Format
- **Images**: 640x640 pixel RGB images
- **Labels**: YOLO format (class_id x_center y_center width height)
- **Classes**: 1 (poo)

## Directory Structure
```
boxed_640x640/
├── images/
│   ├── train/
│   ├── val/
│   └── test/
├── labels/
│   ├── train/
│   ├── val/
│   └── test/
├── dataset.yaml
└── README.md
```

## Processing Parameters
- MIN_SEGMENT_DIST: {min_segment_dist}
- MIN_CUTOUT_DIST: {min_cutout_dist}
- CUTOUT_SIZE: {cutout_size}
- RANDOM_SEED: {random_seed}

Generated by: preprocess.py
"""

    readme_path = os.path.join(output_dir, "README.md")
    with open(readme_path, "w") as f:
        f.write(readme_content)

    print(f"Created dataset README at {readme_path}")


def create_output_directories(output_dir: str):
    """Create necessary output directories for train/val/test splits."""
    for split in ["train", "val", "test"]:
        os.makedirs(os.path.join(output_dir, "images", split), exist_ok=True)
        os.makedirs(os.path.join(output_dir, "labels", split), exist_ok=True)
